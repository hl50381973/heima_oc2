
一、问答题
    1、Xcode4.4以前
       @property的作用是什么
       生成setter 和 getter方法的声明
       @property如何使用
       @property 数据类型 属性名称，就是通过点语法访问的那个名称

       @property 注意点有哪些
       重写setter方法的时候，需要指定它是nonatomic的
       @synthesize的作用是什么
       生成setter与getter方法的实现的
       @synthesize如何使用
       @synthesize 属性名称 = 成员变量名称
       如果不写后面 = 成员变量名称，生成一个与属性名称同名私有的成员变量

    2、Xcode4.4以后
       @property的作用是什么
       @property 生成setter 与 getter方法的声明与实现和一个私有成员变量，_ + 属性名称
       @property使用中的注意点有哪些
       1、重写setter方法的时候，需要指定它是nonatomic的
       2、如果你仅重写setter方法，它会生成getter方法的声明与实现和一个私有成员变量
       3、如果你仅重写getter方法，它会生成setter方法的声明与实现和一个私有成员变量
       4、如果你同时重写getter 和 setter方法，那么它不会帮你生成那个私有成员变量;

       如何使用自己的setter方法，不让@property生成对应的实现方法
       自己按照setter方法的规范去写一个
       实现过程中有哪些要求
       1、必须是对象方法
       2、必须没有返回值
       3、方法名称必须是set + 属性名称(@property 数据类型 属性名称)的首字母大写
       4、必须有一个形参，参数的类型必须属性类型一致
       自己同时实现setter与getter方法应该注意什么
        如果你同时重写getter 和 setter方法，那么它不会帮你生成那个私有成员变量;
    3、什么是私有方法
       在OC中如何实现私有方法
       只在实现文件实现，不再声明文件进行声明

       什么时候使用私有方法
       1、当这个方法不需要提供外界使用的时候，就使用私有方法
       使用私有方法有哪些好处
       2、提供程序灵活，修改私有方法，不会影响这个以外的代码

    4、id类型
       什么是id类型：它是万能的对象指针，是OC中的动态类型
       在OC中如何使用Id类型
       id 可以在没有实现继承情况下，来实现多态

       在初始化方法中就是使用instancetype类型作为返回值的

       id类型与NSObject *的区别是什么
       NSObject * 是静态类型
       使用它定义变量，仅仅可以调用NSObject * 中对象方法
       使用id类型的好处是什么？
           id 可以在没有实现继承情况下，来实现多态
       什么id类型的缺点是什么
            1、它可以调用任何对象上方法，不会编译时类检查
            2、它提示时候，是提示所有对象上的方法，那么找到自己想要调用方法就比较困难
       id类型有哪些注意点
             1、id类型的变量不可以直接访问成员变量，也就是说不支持-> 语法
             2、id类不支持.语法
             3、如果你使用id类的对象，调用它所指向的对象上面不存在的方法，那么在运行时就报错
             4、id 它本身就是一种指针的类型，定义变量的时候，不要再加 *
       id类型的使用场景
          id 可以在没有实现继承情况下，来实现多态
    5、初始化方法
       OC中默认的初始方法是什么
        - (instancetype) init;
       初始化方法的作用是什么
       初始化方法的作用就是用来初始化自己成员变量
       在OC如何重写初始化方法
           在实现文件再写一个  - (instancetype) init;方法
           1、这个方法，必须先定义父类初始化方法
           2、必须对父类初始化进行判断
           3、必须在父类初始化成功了才能初始化自己成员变量
           4、必须返回指向自己指针
       重写OC的初始化方法需要注意什么

       OC中如何实现带参数的初始化方法
       1、这种方法，是自定义的初始化方法，必须要提供声明和实现
       2、这种方法必须以initWith开头，并且initWith中的W必须要大写
       带参数的初始化方法的使用场景是什么
       当你进行初始化的时候需要外界给你传入一些值的时候，就是用带参数初始化方法
    6、通过类方法来创建对象
       1、提供一个简便的构造方法(工厂方法)
       2、命名规则，必须是类方法
       3、返回值类是instancetype
       4、一般是以类名去掉前缀，首字母小写作为方法的开头




